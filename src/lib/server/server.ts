import { db } from "./db";
import DefaultSeeds from "../../defaults/seeds.json";
import type { ChatCompletionMessageParam } from "openai/resources/chat/completions.mjs";
import OpenAI from "openai";
import { OPENAI_API_KEY } from "$env/static/private";
import { plants } from "./schema";
import { eq } from "drizzle-orm";
import type { InsertPlant, SelectPlant } from "../../types";

export const getAllPlants = async () => {
  const existingPlants = await db.query.plants.findMany({
    with: {
      myParent1: true,
      myParent2: true,
    },
  });
  if (existingPlants.length === 0) {
    console.log(
      "No plants in DB, we will attempt to populate with defaults...",
    );
    const newPlants: InsertPlant[] = DefaultSeeds;
    await Promise.all(
      newPlants.map((p) => {
        const { commonName, description, properties, imageUrl } = p;
        console.log("inserting", { commonName });
        return db
          .insert(plants)
          .values({ commonName, description, properties, imageUrl });
      }),
    );
    return await db.query.plants.findMany({
      with: {
        myParent1: true,
        myParent2: true,
      },
    });
  } else {
    return existingPlants;
  }
};

export const addNew = async (plant: InsertPlant, parentIds: number[]) => {
  console.log("add new plant", plant, parentIds);
  if (typeof plant === "string") {
    throw Error("Plant is not an object");
  }
  const { commonName, description, properties } = plant;
  const insertedPlant = await db
    .insert(plants)
    .values({ commonName, description, properties })
    .returning({ insertedId: plants.id });
  const insertedId = insertedPlant[0].insertedId;
  if (parentIds.length === 2) {
    console.log("Adding two parents to this new plant:", parentIds);
    await db
      .update(plants)
      .set({ parent1: parentIds[0], parent2: parentIds[1] })
      .where(eq(plants.id, insertedId));
  }
  if (parentIds.length !== 0 && parentIds.length !== 2) {
    throw Error("A plant can only have exactly zero or 2 parents!");
  }
  return plant;
};

export const generate = async (
  prompt: ChatCompletionMessageParam[],
  parents: [SelectPlant, SelectPlant],
) => {
  let offspring: InsertPlant | null = null;

  if (prompt && parents) {
    console.log("Using prompt: ******** \n", prompt);

    const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

    const completion = await openai.chat.completions.create({
      messages: prompt,
      model: "gpt-3.5-turbo",
    });

    console.log("response:", completion.choices);

    for (const res of completion.choices) {
      console.log(JSON.stringify(res));
      const formattedContent = res.message.content || "{}";

      offspring = parseNewPlant(formattedContent);
      if (offspring) {
        console.log("Offspring:", offspring);
      } else {
        throw Error("Oops, couldn't parse the offspring text");
      }
    }
  }

  return offspring;
};

const parseNewPlant = (text: string): InsertPlant | null => {
  const json = JSON.parse(text);
  if (json["commonName"] && json["description"] && json["properties"]) {
    console.log("JSON appears to have the valid fields");
    return {
      id: 0, // will be autogenerated, anyway
      commonName: json["commonName"],
      description: json["description"],
      properties: { ...json["properties"] },
    };
  } else {
    throw Error("Fields missing from: " + JSON.stringify(Object.keys(json)));
  }
};

export const attachImageToPlant = async (id: number, imageUrl: string) => {
  const res = await db
    .update(plants)
    .set({ imageUrl })
    .where(eq(plants.id, id))
    .returning({ updatedId: plants.id });
  console.log("attachImageToPlant", res);
  res.forEach((r) => {
    console.log("updated ID", r.updatedId);
  });
  if (res.length == 0) {
    throw Error("nothing got updated!");
  }
};
